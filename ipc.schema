
// Example
let s = IpcSchema::builder()
    .route("hello", args![hi_amount: usize]), returns![Array<u32>]);

// Goes into
s.send(route![hello(hi_amount: 10)]).await?;
       //Route("hello", Args([("hi_amount", Value::Number(10))])


// First thing that gets sent over this is the routing info:
// 
//  Name   Arg Name  Return     End
//  ++++   ++++++++  +++         +
// Rhello!Ahi_amount:u64OArrayu32!
// ^     ^          ^   ^
// Route |         End  |
//    End of Name   Output Type
//


// Maybe syscalls too ? Really need something to bridge the gap with async

type BytesRead = usize;
type BytesWritten = usize;
type WakeupCall<Arg> = unsafe extern "C" fn(Arg);

fn vera_read(handle: VeraHandle, buf: &mut [u8], sync: VeraSync) -> VeraResult<BytesRead> { /* ... */ }
fn vera_write(handle: VeraHandle, buf: &[u8], sync: VeraSync) -> VeraResult<BytesWritten> { /* ... */ }

/// This function will use the `VeraSync::Wakeup` internally when called
async fn vera_read(handle: VeraHandle, buf: &mut [u8]) -> VeraResult<BytesRead> { /* ... */ }


enum VeraSync {
    /// Do this operation blocking
    Blocking,
    /// Generate a signal when this operation is ready to be retried
    Signal,
    /// Try to read as much as possible, but non-blocking.
    ///
    /// If no bytes are able to be read, it returns 0
    Attempt,
    /// Call this function when the operation is ready to be retried.
    ///
    /// This will be treated as if the current function had called this function.
    /// Which can cause some side effects if not used correctly. 
    Wakeup(WakeupCall<VeraHandle>)
}

// ALL IPC COMS should be streams
//
// When you launch a program, you let the kernel adopt your stream for bytes. Or you can adopt a foreign stream to
// lets say a file system server on where to get the bytes.
//
// All streams work like mpsc::UnbounedChannels(), they are async and can be shared or transfered.
//
// IPC is just rpc ontop of these channels. 

// It would be cool to have something like an AtomicState struct where you could define these CAS state machines.
//
// Something Like this:

const OPEN_DOOR_BIT: usize = 0;
const AWAY_FROM_ROOM_BIT: usize = 1;
const LOCKED_DOOR_BIT: usize = 2;

let sm = AtomicState::builder()
    .bit(OPEN_DOOR_BIT, bit_if(&[!LOCKED_DOOR_BIT, !AWAY_FROM_ROOM_BIT], DoorError::CannotOpenDoor))
    .bit(AWAY_FROM_ROOM_BIT, bit_if(&[LOCKED_DOOR_BIT], DoorError::CannotLeaveWithoutLockingDoor))
    .bit(LOCKED_DOOR_BIT, bit_if(&[!OPEN_DOOR_BIT], DoorError::DoorMustBeClosedToLock))
    .build(0);

// Open and close the door
sm.into_state(OPEN_DOOR_BIT)?;
sm.into_state(!OPEN_DOOR_BIT)?;

// Lock the door
sm.into_state(LOCKED_DOOR_BIT)?;

// Leave Room
sm.into_state(AWAY_FROM_ROOM_BIT)?;

// Or maybe we could do something neat with macros?
let sm = atomic_state! {
    OpenDoor { bit: +0 } => [
        bit_must(!AwayFromRoom, Error::ConnotOpenWhileAway),
    ],
    ClosedDoor { bit: -0 } => [
        
    ]
    
    
};
